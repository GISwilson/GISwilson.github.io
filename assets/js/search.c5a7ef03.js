(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{290:function(e,r,t){"use strict";t.r(r),r.default=[{title:"webjars与Servlet、Spring的关系理解以及SwaggerUI的应用",path:"/posts/webjars%E4%B8%8EServlet%E3%80%81Spring%E7%9A%84%E5%85%B3%E7%B3%BB%E7%90%86%E8%A7%A3%E4%BB%A5%E5%8F%8ASwaggerUI%E7%9A%84%E5%BA%94%E7%94%A8.html",strippedContent:'# webjars与Servlet、Spring的关系理解以及SwaggerUI的应用        ## Webjars技术简介    webjars是一种客户端的web库，它能把前端的js、css、html等打包到jar中作为一个库供其他人使用。webjars为共享前端界面提供了可能。swagger-ui库以及衍生的[swagger-ui-layer](<https://github.com/caspar-chen/swagger-ui-layer>)等项目就是采用这种技术来进行复用的。    ## Webjars技术使用与原理    webjars技术的本质就是在网页请求时能访问jar中的资源并返回，因此其本质就是一个Servlet。    ### servlet 2.X    在2.X的Servlet规范下，webjars正是通过Servlet的扩展来实现的（详见[这里](<https://www.webjars.org/documentation#springmvc>)）：    1. Register our webjars-servlet-2.x Maven dependency in     your web application:    \t```xml  \t<dependency>      \t<groupId>org.webjars</groupId>      \t<artifactId>webjars-servlet-2.x</artifactId>      \t<version>1.1</version>  \t</dependency>  \t```    2. Register `WebjarsServlet` in your web.xml:       ```xml     \x3c!--Webjars Servlet--\x3e     <servlet>         <servlet-name>WebjarsServlet</servlet-name>         <servlet-class>org.webjars.servlet.WebjarsServlet</servlet-class>         <load-on-startup>2</load-on-startup>     </servlet>     <servlet-mapping>         <servlet-name>WebjarsServlet</servlet-name>         <url-pattern>/webjars/*</url-pattern>     </servlet-mapping>     ```    \tBy default the Webjars resources will be cached by your browser. If for whatever  \treason you need to disable the cache, you can do so by using the \t**disableCache** configuration  \tproperty like this:    \t```xml  \x3c!--Webjars Servlet--\x3e  <servlet>      <servlet-name>WebjarsServlet</servlet-name>      <servlet-class>org.webjars.servlet.WebjarsServlet</servlet-class>      <init-param>          <param-name>disableCache</param-name>          <param-value>true</param-value>      </init-param>      <load-on-startup>2</load-on-startup>  </servlet>    \t```    ### servlet 3.X    在3.X的Servlet规范中，WEB-INF/lib下的jar包中的META-INF/resources将自动作为静态资源供程序来访问。如：    First add a WebJar as a dependency of your application in the pom.xml file, like:    ```xml  <dependencies>      <dependency>          <groupId>org.webjars</groupId>          <artifactId>bootstrap</artifactId>          <version>3.1.0</version>      </dependency>  </dependencies>  ```    Then simply reference the resource like:    <**link** rel=\'stylesheet\' href=\'webjars/bootstrap/3.1.0/css/bootstrap.min.css\'>    **注意：尽管官网说是可行的，但是实际验证发现并不可行。**    ### Spring MVC    一般我们的应用都使用了Spring MVC的DispatcherServlet来处理的，那么需要配置mvc.resources来进行映射：    ```xml  <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>  ```    或通过代码设置：    ```java  @Configuration  @EnableWebMvc  public class WebConfig extends WebMvcConfigurerAdapter {      @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { \t\t\t               registry.addResourceHandler("/webjars/**")          .addResourceLocations("classpath:/META-INF/resources/webjars/");      }  }  ```    且MVC版本大于4.2时，引入如下依赖：    ```xml  <dependencies>      <dependency>          <groupId>org.webjars</groupId>          <artifactId>webjars-locator</artifactId>          <version>0.30</version>      </dependency>  </dependencies>  ```    那么会自动处理版本兼容问题：比如原来路径是`/webjars/bootstrap/3.1.0/css/bootstrap.min.css`，可以直接设置为`/webjars/bootstrap/css/bootstrap.min.css`    ### Spring Boot    Spring Boot与Spring MVC类似，唯一区别是通过自动装配，不必手动设置`mvc:resources`的映射，框架会自动进行处理。    ## webjars使用时要避免的一些坑（以Swagger-ui为例）    从试验的结果来看，Servlet3自动支持有些问题，实际使用往往使用MVC的配置或者Boot的自动装配来处理的，这里面要注意Tomcat的静态资源Servlet、SpringMVC的DispatcherServlet与拦截器之间的一些关系。    首先要使用这种技术，如前面所述，一般需要`web.xml`设置3.0及以上版本，3.0以下版本需要专门引入servlet的依赖。    其次，既然需要依赖MVC的Resources来配置webjars，那么就不能在静态资源Servlet中映射.js/.css之类的，否则会直接走静态资源Servlet的路由，无法访问jar包内的内容：    ```xml  <servlet-mapping>  \t\t<servlet-name>default</servlet-name>  \t\t<url-pattern>*.js</url-pattern>  \t\t<url-pattern>*.css</url-pattern>  \t\t<url-pattern>*.png</url-pattern>  \t\t<url-pattern>*.gif</url-pattern>  \t\t<url-pattern>*.jpg</url-pattern>  \t\t<url-pattern>*.jpeg</url-pattern>  \t\t<url-pattern>/mvp/*</url-pattern>  \t\t<url-pattern>/module/*</url-pattern>  \t\t<url-pattern>/apk/*</url-pattern>  \t\t<url-pattern>/images/*</url-pattern>  \t\t<url-pattern>/swagger/*</url-pattern>  \t</servlet-mapping>  ```    其次，web项目一般会配置拦截器进行拦截，那么默认情况下webjars下的资源也会被拦截，如果要去掉拦截，应该在拦截器的排除项中进行设置，一般要屏蔽.js/.css/.html文件。    Swagger-ui的jar包就是一个swagger-ui.html文件以及相关的css和js文件，在Spring Boot项目中，往往是提供一些rest接口服务，不设置静态Servlet，所以一般无需特殊配置（有拦截器还是要配置过滤下），都能自动访问swagger-ui.html。    要在Spring MVC中使用Swagger-ui，一种方法就是把html、js和css文件拷贝出来自己配置到web-inf中，然后自己配置路由。 另一种方式就是在静态资源Servlet中去掉.js/.css等的映射（改为使用文件夹来映射），拦截器中也进行过滤处理,mvc:resource的设置如下：    ```xml  <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/" />  <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>  ```    代码样例：[webjarsDemo项目](https://github/giswilson/)（工程待上传与完善链接）'}]}}]);